name: Trigger Build on Patch Update

on:
  schedule:
    - cron: "0 15 * * *"
  workflow_dispatch:

jobs:
  check-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout update branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: version

      - name: Fetch latest tags from repos
        id: fetch_tags
        run: |
          curl -s https://api.github.com/repos/anddea/revanced-patches/releases/latest > release_anddea.json
          curl -s https://api.github.com/repos/revanced/revanced-patches/releases/latest > release_official.json

          echo "tag_anddea=$(jq -r .tag_name release_anddea.json)" >> $GITHUB_OUTPUT
          echo "tag_official=$(jq -r .tag_name release_official.json)" >> $GITHUB_OUTPUT

      - name: Initialize missing tag files
        id: init_tags
        run: |
          if [ ! -f "last_tag_anddea" ] || [ ! -f "last_tag_official" ]; then
            echo "${{ steps.fetch_tags.outputs.tag_anddea }}" > last_tag_anddea
            echo "${{ steps.fetch_tags.outputs.tag_official }}" > last_tag_official
            echo "missing=true" >> $GITHUB_OUTPUT
          else
            echo "missing=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push initialized tag files
        if: steps.init_tags.outputs.missing == 'true'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: version
          skip_checkout: true
          file_pattern: last_tag_*
          commit_message: "Initialize tag tracking files"

      - name: Compare and update tag files
        id: compare
        run: |
          read -r LAST_ANDDEA < last_tag_anddea
          read -r LAST_OFFICIAL < last_tag_official

          NEW_ANDDEA="${{ steps.fetch_tags.outputs.tag_anddea }}"
          NEW_OFFICIAL="${{ steps.fetch_tags.outputs.tag_official }}"

          if [ -z "$NEW_ANDDEA" ] || [ -z "$NEW_OFFICIAL" ]; then
            echo "One of the fetched tags is empty!"
            exit 1
          fi

          SHOULD_TRIGGER=0

          if [ "$(printf '%s\n' "$NEW_ANDDEA" "$LAST_ANDDEA" | sort -V | tail -n1)" != "$LAST_ANDDEA" ]; then
            echo "$NEW_ANDDEA" > last_tag_anddea
            SHOULD_TRIGGER=1
          fi

          if [ "$(printf '%s\n' "$NEW_OFFICIAL" "$LAST_OFFICIAL" | sort -V | tail -n1)" != "$LAST_OFFICIAL" ]; then
            echo "$NEW_OFFICIAL" > last_tag_official
            SHOULD_TRIGGER=1
          fi

          echo "Comparing $LAST_ANDDEA vs $NEW_ANDDEA"
          echo "Comparing $LAST_OFFICIAL vs $NEW_OFFICIAL"

          echo "SHOULD_TRIGGER=$SHOULD_TRIGGER" >> $GITHUB_OUTPUT

          # Pass old and new tags as outputs for use in next step
          echo "old_anddea=$LAST_ANDDEA" >> $GITHUB_OUTPUT
          echo "new_anddea=$NEW_ANDDEA" >> $GITHUB_OUTPUT
          echo "old_official=$LAST_OFFICIAL" >> $GITHUB_OUTPUT
          echo "new_official=$NEW_OFFICIAL" >> $GITHUB_OUTPUT

      - name: Commit and push updated tag files
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: version
          skip_checkout: true
          file_pattern: last_tag_*
          commit_message: "Update last release tags"

      - name: Checkout main branch to update config
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Generate filtered config
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        run: |
          cp config.toml config.updated.toml

          if [ "${{ steps.compare.outputs.new_anddea }}" != "${{ steps.compare.outputs.old_anddea }}" ]; then
            echo "Keeping anddea apps enabled"
          else
            sed -i '/\[.*-Anddea\]/,/^\[/ s/enabled = true/enabled = false/' config.updated.toml
          fi

          if [ "${{ steps.compare.outputs.new_official }}" != "${{ steps.compare.outputs.old_official }}" ]; then
            echo "Keeping official apps enabled"
          else
            sed -i '/\[[^]]*\]/,/^\[/ {/patches-source = "revanced\/revanced-patches"/!b}; s/enabled = true/enabled = false/' config.updated.toml
          fi

      - name: Commit updated config
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: "Update config.updated.toml for new patches"
          file_pattern: config.updated.toml

      - name: Trigger Build workflow if new releases found
        if: steps.compare.outputs.SHOULD_TRIGGER == '1'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build.yml
          token: ${{ secrets.PAT_TRIGGER_WORKFLOW }}
